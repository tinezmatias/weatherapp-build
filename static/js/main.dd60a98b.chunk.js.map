{"version":3,"sources":["providers/graphql/index.ts","constants/index.ts","providers/mui-theme/index.ts","components/App/Title.tsx","components/form/TextField.tsx","components/App/LoadingError.tsx","containers/dashboard/WeatherForm.tsx","containers/dashboard/WatherHistory.tsx","utils/localStorageHandler.ts","containers/dashboard/WeatherInfo.tsx","containers/dashboard/WeatherMap.tsx","containers/dashboard/WeatherDetails.tsx","containers/dashboard/querys.ts","containers/dashboard/index.tsx","Root.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["httpLink","createHttpLink","uri","errLink","onError","graphQLErrors","networkError","map","message","console","log","cache","InMemoryCache","link","ApolloLink","from","apolloLogger","graphClient","ApolloClient","theme","createMuiTheme","palette","primary","orange","secondary","green","useStyles","makeStyles","title","color","main","fontSize","textAlign","textTransform","width","borderBottomWidth","borderBottomColor","borderBottomStyle","Title","label","classes","className","InputTextBase","name","error","inputRef","rest","TextField","fullWidth","type","Boolean","helperText","defaultProps","LoadingError","loading","CircularProgress","container","background","padding","marginTop","display","flexDirection","justifyContent","border","buttonContainer","WeatherForm","onsubmit","useForm","register","handleSubmit","errors","isSubmitting","formState","onSubmit","Grid","item","xs","city","Button","variant","onClick","disabled","boxItem","dark","marginBottom","boxLabel","contrastText","paddingLeft","flex","cursor","boxEmpty","boxDelete","paddingRight","WeatherHistory","selectItem","useLocalStorage","weatherHistoryData","addData","isEmpty","Paper","style","maxHeight","overflow","List","key","weatherData","existinCache","deletFromStorage","backgroundColor","alignItems","margin","boxValue","fontWeight","WeatherInfo","data","get","temp","pressure","humidity","temp_min","temp_max","Fragment","md","maxWidth","height","WeatherMap","lat","lon","bootstrapURLKeys","center","lng","defaultZoom","WeatherDetails","WEATHER_DATA_FRAGMENT","gql","GET_WEATHER","WeatherContainer","useState","setData","useLazyQuery","onCompleted","keys","Object","length","weather","writeStorage","writeInLocalStorage","callGetWeather","wheatherQuery","variables","content","paddingTop","paddingBottom","boxShadow","Root","App","client","ThemeProvider","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.dd60a98b.chunk.js","sourcesContent":["// VENDOR\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloLink } from 'apollo-link';\nimport apolloLogger from 'apollo-link-logger';\nimport { createHttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { GRAPH_URL } from '../../constants';\n\nconst httpLink = createHttpLink({ uri: GRAPH_URL });\n\nconst errLink = onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors) {\n        graphQLErrors.map(({ message }) => {\n            return message;\n        });\n    }\n    if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nconst cache = new InMemoryCache();\n\nconst link = ApolloLink.from([apolloLogger, errLink, httpLink]);\n\nconst graphClient = new ApolloClient({\n    cache,\n    link,\n});\n\nexport { graphClient };\n","//export const GRAPH_URL = 'http://localhost:5000/graphql';\nexport const GRAPH_URL = 'http://ec2-18-220-185-202.us-east-2.compute.amazonaws.com:5000/graphql';\nexport const NAME = 'WEATHER-CONTAINER';\nexport const GOOGLE_MAPS_KEY = 'AIzaSyDmcstNY0BdjQOdykrrf9-5D201kYfB0D8';\n","// VENDOR\nimport { createMuiTheme } from '@material-ui/core/styles';\n// THEMES\nimport orange from '@material-ui/core/colors/orange';\nimport green from '@material-ui/core/colors/green';\n\nexport const theme = createMuiTheme({\n    palette: {\n        primary: orange,\n        secondary: green,\n    },\n});","// VENDOR\nimport React from \"react\";\nimport { makeStyles, Theme } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  title: {\n    color: theme.palette.primary.main,\n    fontSize: 25,\n    textAlign: \"left\",\n    textTransform: \"uppercase\",\n    width: \"100%\",\n    borderBottomWidth: 1,\n    borderBottomColor: theme.palette.primary.main,\n    borderBottomStyle: \"solid\"\n  }\n}));\n\nfunction Title({ label }: { label: string }) {\n  const classes = useStyles();\n  return <h1 className={classes.title}>{label}</h1>;\n}\n\nexport default Title;\n","// VENDOR\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\n\nfunction InputTextBase({ name, label, error, inputRef, ...rest }: any) {\n  return (\n    <TextField\n      fullWidth\n      name={name}\n      label={label}\n      type=\"text\"\n      error={Boolean(error)}\n      helperText={error}\n      inputRef={inputRef}\n      {...rest}\n    />\n  );\n}\nInputTextBase.defaultProps = {\n  rest: {},\n  error: null\n};\n\nexport default InputTextBase;\n","// VENDOR\nimport React from \"react\";\nimport { CircularProgress } from \"@material-ui/core\";\n\nfunction LoadingError({\n  error,\n  loading\n}: {\n  error?: string;\n  loading?: boolean;\n}) {\n  if (error) {\n    return <h1>{error}</h1>;\n  }\n  if (loading) {\n    return <CircularProgress />;\n  }\n  return null;\n}\n\nexport default LoadingError;\n","// VENDOR\nimport React from \"react\";\nimport { Grid, Theme, Button, makeStyles } from \"@material-ui/core\";\nimport { useForm } from \"react-hook-form\";\n// COMPONENTS\nimport { InputTextBase } from \"../../components\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  container: {\n    background: \"default\",\n    padding: 10,\n    marginTop: 10,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-evenly\",\n    border: \"2px solid #7986cb\"\n  },\n  buttonContainer: {\n    marginTop: 15,\n    display: \"flex\",\n    justifyContent: \"center\"\n  }\n}));\n\nfunction WeatherForm({ onsubmit }: any) {\n  const {\n    register,\n    handleSubmit,\n    errors,\n    formState: { isSubmitting }\n  } = useForm();\n  const classes = useStyles();\n\n  return (\n    <div className={classes.container}>\n      <form onSubmit={handleSubmit(onsubmit)}>\n        <Grid container>\n          <Grid item xs={12}>\n            <InputTextBase\n              label=\"Select City...\"\n              name=\"city\"\n              inputRef={register}\n              error={errors.city}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.buttonContainer}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleSubmit(onsubmit)}\n              disabled={isSubmitting}\n            >\n              Search\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n    </div>\n  );\n}\n\nexport default WeatherForm;\n","// VENDOR\nimport React from \"react\";\nimport map from \"lodash/map\";\nimport DeleteIcon from \"@material-ui/icons/Close\";\nimport { Grid, Theme, makeStyles, Paper, List } from \"@material-ui/core\";\nimport { useLocalStorage } from \"@rehooks/local-storage\";\nimport isEmpty from \"lodash/isEmpty\";\n// UTILS\nimport { deletFromStorage } from \"../../utils/localStorageHandler\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  container: {\n    marginTop: 10\n  },\n  boxItem: {\n    textAlign: \"left\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    background: theme.palette.primary.dark,\n    marginBottom: 1,\n    marginTop: 1\n  },\n  boxLabel: {\n    textTransform: \"uppercase\",\n    color: theme.palette.primary.contrastText,\n    paddingLeft: 10,\n    flex: 1,\n    cursor: \"pointer\"\n  },\n  \"boxLabel::hover\": {\n    display: \"none\"\n  },\n  boxEmpty: {\n    textTransform: \"uppercase\",\n    paddingLeft: 10,\n    flex: 1,\n    textAlign: \"center\"\n  },\n  boxDelete: {\n    textTransform: \"uppercase\",\n    color: theme.palette.primary.contrastText,\n    cursor: \"pointer\",\n    flex: 1,\n    textAlign: \"right\",\n    paddingLeft: 10,\n    paddingRight: 10\n  }\n}));\n\nfunction WeatherHistory({ selectItem }: any) {\n  // HOOKS STYLES AND LOCAL STORAGE\n  const classes = useStyles();\n  const [weatherHistoryData, addData] = useLocalStorage<Record<string, any>>(\n    \"weatherData\"\n  );\n\n  return (\n    <div className={classes.container}>\n      <Grid container>\n        {!isEmpty(weatherHistoryData) ? (\n          <Paper style={{ maxHeight: 120, overflow: \"auto\", width: \"100%\" }}>\n            <List>\n              {map(weatherHistoryData, (item: any, key: string) => (\n                <Grid item xs={12} key={key}>\n                  <div className={classes.boxItem}>\n                    <p\n                      className={classes.boxLabel}\n                      onClick={() => selectItem(item)}\n                    >\n                      {item.name}\n                    </p>\n                    <p\n                      className={classes.boxDelete}\n                      onClick={() =>\n                        deletFromStorage(key, weatherHistoryData, addData)\n                      }\n                    >\n                      <DeleteIcon />\n                    </p>\n                  </div>\n                </Grid>\n              ))}\n            </List>\n          </Paper>\n        ) : (\n          <Grid item xs={12}>\n            <div className={classes.boxItem}>\n              <p className={classes.boxEmpty}>History empty</p>\n            </div>\n          </Grid>\n        )}\n      </Grid>\n    </div>\n  );\n}\n\nexport default WeatherHistory;\n","// VENDOR\nimport { writeStorage } from \"@rehooks/local-storage\";\n\n// WRITE ITEM HANDLER\nexport function writeInLocalStorage(data: any, weatherData: any) {\n    if (data) {\n        let existinCache = weatherData ? weatherData : {};\n        const keys = Object.keys(existinCache)\n        if (keys.length === 5) {\n            delete existinCache[keys[4]]\n        }\n        existinCache[data.weather.name] = data.weather;\n        writeStorage(\"weatherData\", existinCache);\n    }\n}\n\n// DELETE ITEM HANDLER\nexport function deletFromStorage(key: string, weatherData: any, addData: any) {\n    const existinCache = weatherData ? weatherData : {};\n    delete existinCache[key];\n    addData({ ...existinCache });\n};\n\n","// Vendor\nimport React from \"react\";\nimport { Grid, makeStyles, Theme } from \"@material-ui/core\";\nimport get from \"lodash/get\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  boxItem: {\n    backgroundColor: theme.palette.primary.dark,\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    margin: 1,\n    border: \"2px solid #7986cb\",\n    paddingRight: 20,\n    paddingLeft: 20\n  },\n  boxLabel: {\n    color: theme.palette.primary.contrastText,\n    fontSize: 25\n  },\n  boxValue: {\n    color: theme.palette.primary.contrastText,\n    fontSize: 20,\n    fontWeight: 700\n  }\n}));\n\ninterface IMain {\n  temp: number;\n  pressure: number;\n  humidity: number;\n  temp_min: number;\n  temp_max: number;\n}\n\nfunction WeatherInfo({ data }: { data: { main: IMain } }) {\n  const classes = useStyles();\n  const main = get(data, \"main\", {\n    temp: 0,\n    pressure: 0,\n    humidity: 0,\n    temp_min: 0,\n    temp_max: 0\n  });\n  return (\n    <React.Fragment>\n      <Grid container>\n        <Grid item xs={12} md={12}>\n          <div className={classes.boxItem}>\n            <p className={classes.boxLabel}>Temperature</p>\n            <p className={classes.boxValue}>{`${main.temp} °C`}</p>\n          </div>\n        </Grid>\n        <Grid item xs={12} md={12}>\n          <div className={classes.boxItem}>\n            <p className={classes.boxLabel}>Pressure</p>\n            <p className={classes.boxValue}>{`${main.pressure} Hpa`}</p>\n          </div>\n        </Grid>\n        <Grid item xs={12} md={12}>\n          <div className={classes.boxItem}>\n            <p className={classes.boxLabel}>Humidity</p>\n            <p className={classes.boxValue}>{`${main.humidity} %`}</p>\n          </div>\n        </Grid>\n        <Grid item xs={12} md={12}>\n          <div className={classes.boxItem}>\n            <p className={classes.boxLabel}>Max temperature</p>\n            <p className={classes.boxValue}>{`${main.temp_max} °C`}</p>\n          </div>\n        </Grid>\n        <Grid item xs={12} md={12}>\n          <div className={classes.boxItem}>\n            <p className={classes.boxLabel}>Min temperature</p>\n            <p className={classes.boxValue}>{`${main.temp_min} °C`}</p>\n          </div>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\nexport default WeatherInfo;\n","// VENDOR\nimport React from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport { makeStyles, Theme } from \"@material-ui/core\";\nimport get from \"lodash/get\";\n// CONSTANTS\nimport { GOOGLE_MAPS_KEY } from \"../../constants\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  container: {\n    maxWidth: \"100%\",\n    display: \"flex\",\n    height: \"100%\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n}));\n\nfunction WeatherMap({\n  data\n}: {\n  data: { coord: { lat: number; lon: number } };\n}) {\n  console.log(data);\n  const classes = useStyles();\n  const lat = get(data, \"coord.lat\", 0);\n  const lon = get(data, \"coord.lon\", 0);\n  return (\n    <div className={classes.container}>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: GOOGLE_MAPS_KEY }}\n        center={{\n          lat: lat,\n          lng: lon\n        }}\n        defaultZoom={10}\n      />\n    </div>\n  );\n}\n\nexport default WeatherMap;\n","// VENDOR\nimport React from \"react\";\nimport { makeStyles, Theme, Grid } from \"@material-ui/core\";\n// COMPONENTS\nimport WeatherInfo from \"./WeatherInfo\";\nimport WeatherMap from \"./WeatherMap\";\nimport { Title } from \"../../components\";\nimport { LoadingError } from \"../../components\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  loading: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: \"10%\"\n  }\n}));\n\nfunction WeatherDetails({ data, loading }: any) {\n  const classes = useStyles();\n  const name = data ? data.name : \"\";\n  return (\n    <Grid container>\n      <Grid item xs={12} md={12}>\n        <Title label={`Current weather: ${name}`} />\n      </Grid>\n      <Grid item xs={12} md={5}>\n        {/* COMPONENT TO SHOW WHEATHER INFORMATION */}\n        {loading ? (\n          <Grid className={classes.loading}>\n            <LoadingError loading={true} />\n          </Grid>\n        ) : (\n          <WeatherInfo data={data} />\n        )}\n      </Grid>\n      <Grid item xs={12} md={7}>\n        {/* COMPONENT TO SHOW MAP DATA */}\n        <WeatherMap data={data} />\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default WeatherDetails;\n","// VENDOR \nimport gql from 'graphql-tag';\n\n// GRAPH QL QUERY DEFINITION\nconst WEATHER_DATA_FRAGMENT = gql`\n  fragment WeatherFragment on WeatherResponseType{\n    coord {\n      lat\n      lon\n    }\n    main {\n      temp\n      pressure\n      humidity\n      temp_min\n      temp_max\n    }\n    name\n  }\n`;\n\nexport const GET_WEATHER = gql`\n  query weather($city: String!) {\n    weather(city: $city) {\n      ...WeatherFragment\n    }\n  }\n  ${WEATHER_DATA_FRAGMENT} \n`;","// VENDOR\nimport React, { useState } from \"react\";\nimport { useLocalStorage } from \"@rehooks/local-storage\";\nimport { makeStyles, Theme, Grid } from \"@material-ui/core\";\nimport { useLazyQuery } from \"@apollo/react-hooks\";\n// COMPONENTS\nimport WeatherForm from \"./WeatherForm\";\nimport WeatherHistory from \"./WatherHistory\";\nimport WeatherDetails from \"./WeatherDetails\";\nimport { LoadingError } from \"../../components\";\n// QUERY\nimport { GET_WEATHER } from \"./querys\";\n// UTILS\nimport { writeInLocalStorage } from \"../../utils/localStorageHandler\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  loading: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: \"10%\"\n  }\n}));\n\nfunction WeatherContainer() {\n  const classes = useStyles();\n  // ON COMPLETE QUERY\n  const onCompleted = (data: any) => {\n    if (data) {\n      writeInLocalStorage(data, weatherData);\n      setData(data.weather);\n    }\n  };\n  // ON SUBMIT HANDLER AND QUERY\n  const _onSubmitHandler = (data: { city: string }) =>\n    callGetWeather({ variables: { city: data.city } });\n\n  // HOOKS FOR: STYLES, NAVIGATION, QUERY DATA, SET DATA, SAVE IN STORAGE\n  const [data, setData] = useState();\n  const [callGetWeather, wheatherQuery] = useLazyQuery(GET_WEATHER, {\n    onCompleted\n  });\n  const [weatherData] = useLocalStorage<Record<string, any>>(\"weatherData\");\n\n  return (\n    <Grid container>\n      <Grid item xs={12} md={6}>\n        <WeatherForm onsubmit={_onSubmitHandler} />\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <WeatherHistory selectItem={setData} />\n      </Grid>\n      <Grid item xs={12} md={12}>\n        {/*INFO WRAPPER LOADING | ERROR | WEATHER DATA*/}\n        {wheatherQuery.error ? (\n          <Grid className={classes.loading}>\n            <LoadingError error={wheatherQuery.error.message} />\n          </Grid>\n        ) : (\n          <WeatherDetails data={data} loading={wheatherQuery.loading} />\n        )}\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default WeatherContainer;\n","// VENDOR\nimport React from 'react';\nimport { Grid, Paper, makeStyles } from '@material-ui/core';\n// LAYOUT\nimport WeatherLayout from './containers/dashboard';\n// COMPONENTS\nimport { Title } from './components';\n\nconst useStyles = makeStyles(() => ({\n  content: {\n    paddingTop: 10,\n    paddingBottom: 10,\n    paddingLeft: 40,\n    paddingRight: 40,\n    boxShadow: 'none',\n  },\n}));\n\nfunction Root() {\n  const classes = useStyles();\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <Paper className={classes.content}>\n          <Title label=\"Weather search\" />\n          <WeatherLayout />\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default Root;\n","// VENDOR\nimport React from 'react';\n// PROVIDER: GRAPHQL\nimport { ApolloProvider } from 'react-apollo';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { graphClient } from './providers/graphql';\n// PROVIDER: MATERIAL UI THEME\nimport { theme } from './providers/mui-theme';\n// ROOT\nimport Root from './Root';\n\nfunction App() {\n  return (\n    <ApolloProvider client={graphClient}>\n      <ThemeProvider theme={theme}>\n        <Root />\n      </ThemeProvider>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}